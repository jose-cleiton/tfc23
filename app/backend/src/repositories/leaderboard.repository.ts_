/* import { ILeaderboard, ILdbModel } from '../interfaces/leaderboard.interface';
import { matchesScore, galleryLdb, sortLdb } from '../utils/leaderboardUtils';
import Team from '../database/models/Team.model';
import Match from '../database/models/Match.model';
import { ITeamMatches } from '../interfaces/teams.interface';

export default class LdbRepository implements ILdbModel {
  constructor(private _teamModel = Team) { }

  async getHomeLdb(): Promise<ILeaderboard[]> {
    const data = await this._teamModel.findAll({
      include: [
        { model: Match, as: 'teamHome', where: { inProgress: false } },
      ],
    }) as unknown as ITeamMatches[];

    const ldb = data.map(({ teamName, teamHome }) => ({
      name: teamName,
      ...matchesScore(teamHome, true),
    }));
    return sortLdb(ldb);
  }

  async getAwayLdb(): Promise<ILeaderboard[]> {
    const data = await this._teamModel.findAll({
      include: [
        { model: Match, as: 'teamAway', where: { inProgress: false } },
      ],
    }) as unknown as ITeamMatches[];

    const ldb = data.map(({ teamName, teamAway }) => ({
      name: teamName,
      ...matchesScore(teamAway, false),
    }));
    return sortLdb(ldb);
  }

  async getAll(): Promise<ILeaderboard[]> {
    const data = await this._teamModel.findAll({
      include: [
        { model: Match, as: 'teamHome', where: { inProgress: false } },
        { model: Match, as: 'teamAway', where: { inProgress: false } },
      ],
    }) as unknown as ITeamMatches[];

    const ldb = data.map(({ teamName, teamHome, teamAway }) => ({
      name: teamName,
      ...galleryLdb(matchesScore(teamHome, true), matchesScore(teamAway, false)),
    }));
    return sortLdb(ldb);
  }
}
 */
